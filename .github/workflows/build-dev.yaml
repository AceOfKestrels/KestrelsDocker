name: Build Containers on dev branch and latest tag

on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  validate-files:
    name: Validate Dockerfiles, nginx.conf, and Caddyfiles
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Validate Dockerfiles
      - name: Validate Dockerfiles
        run: |
          echo "Validating Dockerfiles..."
          find . -name 'Dockerfile' | while read dockerfile; do
            echo "Validating $dockerfile"
            docker run --rm -i hadolint/hadolint < "$dockerfile" || {
              echo "Validation failed for $dockerfile"
              exit 1
            }
          done
          echo "All Dockerfiles are valid."

      # Step 3: Validate nginx.conf files
      - name: Validate nginx.conf files
        run: |
          echo "Validating nginx.conf files..."
          find . -name 'nginx.conf' | while read nginx_conf; do
            echo "Validating $nginx_conf"
            docker run --rm -v "$(pwd):/config" nginx:latest nginx -t -c "/config/$nginx_conf" || {
              echo "Validation failed for $nginx_conf"
              exit 1
            }
          done
          echo "All nginx.conf files are valid."

      # Step 4: Validate Caddyfiles
      - name: Validate Caddyfiles
        run: |
          echo "Validating Caddyfiles..."
          find . -name 'Caddyfile' | while read caddyfile; do
            echo "Validating $caddyfile"
            docker run --rm -v "$(pwd):/srv" caddy:latest caddy validate --config "/srv/$caddyfile" || {
              echo "Validation failed for $caddyfile"
              exit 1
            }
          done
          echo "All Caddyfiles are valid."

  build-images:
    name: Build and Push Docker Images
    needs: validate-files
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Set up Docker Compose and install yq
      - name: Install Docker Compose and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose yq
      
      # Step 3: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 4: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          install: true
      
      # Step 5: Build and push Docker images
      - name: Build and push Docker images
        run: |
          services=$(docker-compose -f build-compose.yml config --services)
          for service in $services; do
            echo "Processing service: $service"
            image_name=$(docker-compose -f build-compose.yml config | awk -v srv="$service" '
              $0 ~ srv {found=1}
              found && /image:/ {print $2; exit}
            ')
            if [ -z "$image_name" ]; then
              echo "Image name not found for service: $service"
              exit 1
            fi
            image_name_with_registry="ghcr.io/${{ github.repository_owner }}/${image_name}"
            image_name_with_registry=$(echo "$image_name_with_registry" | tr '[:upper:]' '[:lower:]')
            dev_tag="${image_name_with_registry}:dev"
            echo "Building and pushing: $image_name_with_registry with dev tag"
          
            # Define the build context and Dockerfile path
            build_context="."
            dockerfile_path="./${image_name}/Dockerfile"
          
            # Check if a specific build context or Dockerfile is defined for the service
            service_build_context=$(docker-compose -f build-compose.yml config | awk -v srv="$service" '
              $0 ~ srv {found=1}
              found && /context:/ {print $2; exit}
            ')
            service_dockerfile=$(docker-compose -f build-compose.yml config | awk -v srv="$service" '
              $0 ~ srv {found=1}
              found && /dockerfile:/ {print $2; exit}
            ')
          
            # Override defaults if specific paths are defined
            if [ -n "$service_build_context" ]; then
              build_context="$service_build_context"
            fi
            if [ -n "$service_dockerfile" ]; then
              dockerfile_path="$service_dockerfile"
            fi
          
            # Build and push the Docker image with both tags
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --file "$dockerfile_path" \
              --tag "$image_name_with_registry" \
              --tag "$dev_tag" \
              --push \
              "$build_context"
          done
          
  validate-images:
    name: Validate Docker Images
    needs: build-images
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install Docker Compose and yq
      - name: Install Docker Compose and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose yq

      # Step 3: Verify pushed images
      - name: Verify pushed images
        run: |
          services=$(docker-compose -f build-compose.yml config --services)
          for service in $services; do
            image_name=$(docker-compose -f build-compose.yml config | awk -v srv="$service" '
              $0 ~ srv {found=1}
              found && /image:/ {print $2; exit}
            ')
            if [ -z "$image_name" ]; then
              echo "Image name not found for service: $service"
              exit 1
            fi
            image_name_with_registry="ghcr.io/${{ github.repository_owner }}/${image_name}"
            image_name_with_registry=$(echo "$image_name_with_registry" | tr '[:upper:]' '[:lower:]')
            dev_tag="${image_name_with_registry}:dev"
            if docker pull "$image_name_with_registry" && docker pull "$dev_tag"; then
              echo "Successfully pushed and verified: $service ($image_name_with_registry and $dev_tag)"
            else
              echo "Failed to verify image: $service"
              exit 1
            fi
          done