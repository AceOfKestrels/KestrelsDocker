name: Build Containers on Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  #### 1. Validate Files (Dockerfiles, nginx.conf, Caddyfiles)
  validate-files:
    name: Validate Dockerfiles, nginx.conf, and Caddyfiles
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Dockerfiles with Hadolint
        run: |
          echo "Validating Dockerfiles..."
          find . -name 'Dockerfile' | while read dockerfile; do
            echo "Validating $dockerfile"
            docker run --rm -i hadolint/hadolint < "$dockerfile" || { echo "❌ Validation failed for $dockerfile"; exit 1; }
          done
          echo "✅ All Dockerfiles are valid."

      - name: Validate nginx.conf Files
        run: |
          echo "Validating nginx.conf files..."
          find . -name 'nginx.conf' | while read nginx_conf; do
            echo "Validating $nginx_conf"
            docker run --rm -v "$(pwd):/config" nginx:stable nginx -t -c "/config/$nginx_conf" || { echo "❌ Validation failed for $nginx_conf"; exit 1; }
          done
          echo "✅ All nginx.conf files are valid."

      - name: Validate Caddyfiles
        run: |
          echo "Validating Caddyfiles..."
          find . -name 'Caddyfile' | while read caddyfile; do
            echo "Validating $caddyfile"
            docker run --rm \
              -e ADMIN_MAIL=your_email@example.com \
              -e WEB_ADDRESS=example.com \
              -e KESTRELSNEST_HOST=http://kestrelsnest-host \
              -e KESTRELSWIKI_HOST=http://kestrelwiki-host \
              -e DNS_TOKEN=example_token \
              -v "$(pwd):/srv" ghcr.io/caddybuilds/caddy-cloudflare:latest caddy validate --config "/srv/$caddyfile" || { echo "❌ Validation failed for $caddyfile"; exit 1; }
          done
          echo "✅ All Caddyfiles are valid."

  #### 2. Build Images for AMD64
  build-images-amd64:
    name: Build and Push Docker Images (AMD64)
    needs: validate-files
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Docker Compose and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose yq

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Images (AMD64)
        run: |
          services=$(docker-compose -f build-compose.yml config --services)
          for service in $services; do
            echo "Processing service: $service"
            image_name=$(docker-compose -f build-compose.yml config | awk -v srv="$service" '
              $0 ~ srv {found=1}
              found && /image:/ {print $2; exit}
            ')
            if [ -z "$image_name" ]; then
              echo "❌ Image name not found for service: $service"
              exit 1
            fi
            image_name_with_registry="ghcr.io/${{ github.repository_owner }}/${image_name}"
            # Ensure the repository name is lowercase
            image_name_with_registry=$(echo "$image_name_with_registry" | tr '[:upper:]' '[:lower:]')
            echo "Building (AMD64) $image_name_with_registry"
            docker build --file "./${image_name}/Dockerfile" \
              --build-arg INSTALL_GO=true \
              --build-arg ARCH="x64" \
              -t "$image_name_with_registry:amd64" .
            docker push "$image_name_with_registry:amd64"
          done

  #### 3. Build Images for ARM64
  build-images-arm64:
    name: Build and Push Docker Images (ARM64)
    needs: validate-files
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Docker Compose and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose yq

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Images (ARM64)
        run: |
          services=$(docker-compose -f build-compose.yml config --services)
          for service in $services; do
            echo "Processing service: $service"
            image_name=$(docker-compose -f build-compose.yml config | awk -v srv="$service" '
              $0 ~ srv {found=1}
              found && /image:/ {print $2; exit}
            ')
            if [ -z "$image_name" ]; then
              echo "❌ Image name not found for service: $service"
              exit 1
            fi
            image_name_with_registry="ghcr.io/${{ github.repository_owner }}/${image_name}"
            image_name_with_registry=$(echo "$image_name_with_registry" | tr '[:upper:]' '[:lower:]')
            echo "Building (ARM64) $image_name_with_registry"
            docker build --file "./${image_name}/Dockerfile" \
              --build-arg INSTALL_GO=true \
              --build-arg ARCH="arm64" \
              -t "$image_name_with_registry:arm64" .
            docker push "$image_name_with_registry:arm64"
          done

  #### 4. Create Multi-Arch Manifest Using the Release Tag (No Latest Alias)
  create-manifest:
    name: Create and Push Multi-Arch Manifest
    needs:
      - build-images-amd64
      - build-images-arm64
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Docker Compose and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose yq

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and Push Multi-Arch Manifest
        run: |
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          echo "Using release tag: ${RELEASE_TAG}"
          services=$(docker-compose -f build-compose.yml config --services)
          for service in $services; do
            echo "Processing service: $service for manifest creation"
            image_name=$(docker-compose -f build-compose.yml config | awk -v srv="$service" '
              $0 ~ srv {found=1}
              found && /image:/ {print $2; exit}
            ')
            if [ -z "$image_name" ]; then
              echo "❌ Image name not found for service: $service"
              exit 1
            fi
            image_name_with_registry="ghcr.io/${{ github.repository_owner }}/${image_name}"
            image_name_with_registry=$(echo "$image_name_with_registry" | tr '[:upper:]' '[:lower:]')
            manifest_tag="${image_name_with_registry}:${RELEASE_TAG}"
            echo "Creating manifest for $manifest_tag"
            docker manifest create "$manifest_tag" "$image_name_with_registry:amd64" "$image_name_with_registry:arm64"
            docker manifest push "$manifest_tag"
          done

  #### 5. Validate the Pushed Manifests (Pull Test)
  validate-images:
    name: Validate Pushed Images (Pull Test)
    needs: create-manifest
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Docker Compose and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose yq

      - name: Verify Manifest Images
        run: |
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          services=$(docker-compose -f build-compose.yml config --services)
          for service in $services; do
            image_name=$(docker-compose -f build-compose.yml config | awk -v srv="$service" '
              $0 ~ srv {found=1}
              found && /image:/ {print $2; exit}
            ')
            if [ -z "$image_name" ]; then
              echo "❌ Image name not found for service: $service"
              exit 1
            fi
            image_name_with_registry="ghcr.io/${{ github.repository_owner }}/${image_name}"
            image_name_with_registry=$(echo "$image_name_with_registry" | tr '[:upper:]' '[:lower:]')
            manifest_tag="${image_name_with_registry}:${RELEASE_TAG}"
            echo "Verifying manifest image: $manifest_tag"
            docker pull "$manifest_tag" || { echo "❌ Failed to pull image: $manifest_tag"; exit 1; }
          done

  #### 6. Test the Images at Runtime (Container Startup Check)
  test-images:
    name: Test Multi-Arch Images at Runtime
    needs: create-manifest
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-24.04
          - arch: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Test Container Startup on ${{ matrix.arch }}
        run: |
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          services=$(docker-compose -f build-compose.yml config --services)
          for service in $services; do
            echo "Testing service: $service on architecture ${{ matrix.arch }}"
            image_name=$(docker-compose -f build-compose.yml config | awk -v srv="$service" '
              $0 ~ srv {found=1}
              found && /image:/ {print $2; exit}
            ')
            if [ -z "$image_name" ]; then
              echo "❌ Image name not found for service: $service"
              exit 1
            fi
            image_name_with_registry="ghcr.io/${{ github.repository_owner }}/${image_name}"
            image_name_with_registry=$(echo "$image_name_with_registry" | tr '[:upper:]' '[:lower:]')
            manifest_tag="${image_name_with_registry}:${RELEASE_TAG}"
            echo "Running container from $manifest_tag on ${{ matrix.arch }}..."
          
            # Set environment variables based on the service topic (adjust as needed)
            envs=""
            if [ "$image_name" = "kestrelsdocker-reversproxy" ]; then
              envs="-e DNS_TOKEN=example_dns-token -e ADMIN_MAIL=mail@example.com -e WEB_ADDRESS=example.com -e KESTRELSNEST_HOST=http://kestrelsnest-host -e KESTRELSWIKI_HOST=http://kestrelwiki-host"
            elif [ "$image_name" = "kestrelwiki-host" ]; then
              envs="-e ASPNETCORE_HTTP_PORTS=80 -e CONTENT_PATH='../content' -e WEBROOT_PATH='../wwwroot' -e WEBPAGE_REPOSITORY=https://github.com/AceOfKestrels/kestrelsnest.git -e FILE_LOGGING=true -e LOG_PATH=/var/log/kestrelswiki"
            fi

            container_id=$(docker run --rm -d --platform "linux/${{ matrix.arch }}" $envs "$manifest_tag")
            if [ -z "$container_id" ]; then
              echo "Failed to start container for service $service on architecture ${{ matrix.arch }}"
              exit 1
            fi
            sleep 10
            running=$(docker inspect -f '{{.State.Running}}' $container_id)
            if [ "$running" != "true" ]; then
              echo "Container for service $service on architecture ${{ matrix.arch }} did not start properly."
              docker logs $container_id
              exit 1
            fi
            docker stop $container_id
            echo "Test passed: Container for service $service on architecture ${{ matrix.arch }} started successfully."
          done

  #### 7. Cleanup Old Build Artifact Tags (Preserve Underlying Images for Manifest)
  cleanup-tags:
    name: Clean Up Old Build Artifact Tags
    needs: [validate-images, test-images]
    runs-on: ubuntu-24.04
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install GitHub CLI, jq and Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq docker-compose

      - name: Remove Old Build Artifact Tags from GHCR
        env:
          OWNER: ${{ github.repository_owner }}
        run: |
          echo "Cleaning up old build artifact tags..."
          services=$(docker-compose -f build-compose.yml config --services)
          for service in $services; do
            echo "Processing service: $service"
            image_name=$(docker-compose -f build-compose.yml config | awk -v srv="$service" '
              $0 ~ srv {found=1}
              found && /image:/ {print $2; exit}
            ')
            if [ -z "$image_name" ]; then
              echo "❌ Image name not found for service: $service"
              exit 1
            fi
            package_name=$(echo "$image_name" | tr '[:upper:]' '[:lower:]')
            echo "Cleaning up build artifact tags for package: $OWNER/$package_name"
            versions=$(gh api --paginate "/users/$OWNER/packages/container/$package_name/versions" --jq '.[]')
            echo "$versions" | jq -c 'select(.metadata.container.tags[]? | test("^(amd64|arm64)$"))' | while read version; do
              created_at=$(echo "$version" | jq -r '.created_at')
              # Only delete versions older than 30 days
              if [[ $(date -d "$created_at" +%s) -lt $(date -d "30 days ago" +%s) ]]; then
                version_id=$(echo "$version" | jq -r '.id')
                tags=$(echo "$version" | jq -r '.metadata.container.tags | join(",")')
                echo "Deleting version $version_id with tags: $tags"
                gh api -X DELETE "/users/$OWNER/packages/container/$package_name/versions/$version_id"
              else
                echo "Keeping recent version created at $created_at"
              fi
            done
          done